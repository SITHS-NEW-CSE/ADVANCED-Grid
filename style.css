.wrapper {
  display: grid; /* creates a grid with .wrapper as the parent container */
  grid-template-columns: repeat(
    4,
    1fr
  ); /* sets how many grid section columns will appear. this says that 4 sections will be created each taking up 1 evenly sized fraction (fr) of the container */
  gap: 10px; /* the gap between grid sections */
  grid-auto-rows: minmax(
    100px,
    auto
  ); /* sets how many grid section rows will appear. this has it so that every grid section row will be a minimum of 100px and the maximum will be set automatically. More rows will be added as they get filled until they fill the entire parent container */
}
.one {
  grid-column: 1 / 3; /* sets the size of the element by column. This element starts in column 1 and stretches to the beginning of column 3, before the gap. */
  grid-row: 1; /* sets the size of the of the element by row. This element is only in row 1 */
}

.two {
  grid-column: 2;
  grid-row: 1 / 3;
}

.three {
  grid-column: 1;
  grid-row: 2 / 5;
}

.four {
  grid-column: 3 / 5;
  grid-row: 1 / 4;
  display: grid;
  grid-template-columns: repeat(
    2,
    1fr
  ); /* you can make a grid element be a parent container for its own grid. */
  gap: 10px;
  grid-auto-rows: minmax(40px, auto);
}

.five {
  /* five is an image, so along with the grid placement it had to be assigned its own height. */
  height: 17rem;
  grid-column: 2;
  grid-row: 3 / 5;
}

.six {
  grid-column: 3;
  grid-row: 4;
}

.seven {
  grid-column: 1 / 4;
  /* if a column or row isn't set, the grid element will automatically fill the next empty space. */
}

.eight {
  grid-row: 4 / 6;
}

.item {
  background-color: aquamarine;
}

.sub-item {
  background-color: royalblue;
  color: white;
}

.one {
  background-color: blue;
  color: white;
}
